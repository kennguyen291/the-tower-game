{"ast":null,"code":"var _jsxFileName = \"/Users/apple/the-tower/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport _isEqual from \"lodash/isEqual\";\nimport { movePlateDown, movePlateUp, movePlateHorizontal } from \"./utils\";\nimport Tower from \"./Tower\";\nimport warningRick from \"./images/warning-rick.png\";\nimport styles from \"./styles.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst plateList = [{\n  name: \"plate 1\",\n  size: \"40\",\n  color: \"red\"\n}, {\n  name: \"plate 2\",\n  size: \"50\",\n  color: \"green\"\n}, {\n  name: \"plate 3\",\n  size: \"60\",\n  color: \"blue\"\n}, {\n  name: \"plate 4\",\n  size: \"70\",\n  color: \"yellow\"\n}];\nexport const TOWER_TYPES = {\n  source: \"source\",\n  auxiliary: \"auxiliary\",\n  destination: \"destination\"\n};\nexport default function App() {\n  _s();\n\n  const [typeOfPlate, setTypeOfPlate] = useState(\"\");\n  const [isWin, setIsWin] = useState(false);\n  const [isDoneMoving, setIsDoneMoving] = useState(true);\n  const [isShowBeSa, setShowBeSa] = useState(false);\n  const [towerState, setTowerState] = useState({\n    sourceList: [...plateList],\n    auxiliaryList: [],\n    destinationList: []\n  });\n  const [fromTower, setFromTower] = useState(null);\n  const [toTower, setToTower] = useState(null);\n  const sourceRef = useRef(null);\n  const auxiliaryRef = useRef(null);\n  const destinationRef = useRef(null);\n\n  const reset = () => {\n    setIsWin(false);\n    setIsDoneMoving(true);\n    setShowBeSa(false);\n    setTowerState({\n      sourceList: [...plateList],\n      auxiliaryList: [],\n      destinationList: []\n    });\n    setFromTower(null);\n    setToTower(null);\n  };\n\n  const moveItem = useCallback((towerType, shiftItem) => {\n    if (!fromTower || !toTower) return;\n    const unShiftTowerName = `${TOWER_TYPES[towerType]}List`;\n    const shiftTowerName = `${TOWER_TYPES[fromTower]}List`;\n    setTowerState(prevState => {\n      let updatedTowerState = { ...prevState\n      };\n      const shiftTower = [...updatedTowerState[shiftTowerName]];\n      shiftTower.shift();\n      updatedTowerState = { ...updatedTowerState,\n        [shiftTowerName]: [...shiftTower]\n      };\n      const unshiftTower = [...updatedTowerState[unShiftTowerName]];\n      unshiftTower.unshift(shiftItem);\n      updatedTowerState = { ...updatedTowerState,\n        [unShiftTowerName]: [...unshiftTower]\n      };\n      setFromTower(null);\n      setToTower(null);\n      return { ...updatedTowerState\n      };\n    });\n  }, [fromTower, toTower]);\n  useEffect(() => {// move()\n  }, []);\n  useEffect(() => {\n    if (isShowBeSa) {\n      setTimeout(() => {\n        setShowBeSa(false);\n      }, 800);\n    }\n  }, [isShowBeSa]);\n  useEffect(() => {\n    let isWin = false;\n    const {\n      destinationList\n    } = towerState;\n\n    if (_isEqual(destinationList, plateList)) {\n      isWin = true;\n    }\n\n    setIsWin(isWin);\n  }, [towerState]);\n  useEffect(() => {\n    if (!fromTower) return;\n    let requestId;\n    let start;\n    let previousTimeStamp;\n    let fromTowerRef = null;\n    let toTowerRef = null;\n\n    if (fromTower && !toTower) {\n      switch (fromTower) {\n        case TOWER_TYPES.source:\n          fromTowerRef = sourceRef.current;\n          break;\n\n        case TOWER_TYPES.auxiliary:\n          fromTowerRef = auxiliaryRef.current;\n          break;\n\n        case TOWER_TYPES.destination:\n          fromTowerRef = destinationRef.current;\n          break;\n\n        default:\n      }\n\n      const doneMoveUpCallback = () => {\n        setIsDoneMoving(true);\n      };\n\n      setIsDoneMoving(false);\n      requestId = window.requestAnimationFrame(timeStamp => {\n        movePlateUp({\n          currentTimeStamp: timeStamp,\n          start,\n          previousTimeStamp,\n          fromTowerRef,\n          requestId,\n          doneMoveUpCallback\n        });\n      });\n    }\n\n    if (toTower) {\n      var _unshiftTower$;\n\n      switch (toTower) {\n        case TOWER_TYPES.source:\n          toTowerRef = sourceRef.current;\n          break;\n\n        case TOWER_TYPES.auxiliary:\n          toTowerRef = auxiliaryRef.current;\n          break;\n\n        case TOWER_TYPES.destination:\n          toTowerRef = destinationRef.current;\n          break;\n\n        default:\n      }\n\n      switch (fromTower) {\n        case TOWER_TYPES.source:\n          fromTowerRef = sourceRef.current;\n          break;\n\n        case TOWER_TYPES.auxiliary:\n          fromTowerRef = auxiliaryRef.current;\n          break;\n\n        case TOWER_TYPES.destination:\n          fromTowerRef = destinationRef.current;\n          break;\n\n        default:\n      }\n\n      const checkIsValidShift = towerType => {\n        const towerStateName = `${TOWER_TYPES[towerType]}List`;\n        if (updatedTowerState[towerStateName].length > 0) return true;\n        return false;\n      };\n\n      const selectItemToMove = towerType => {\n        const isValidToPop = checkIsValidShift(towerType);\n        if (!isValidToPop) return;\n        const towerStateName = `${TOWER_TYPES[towerType]}List`;\n        const tobeShiftItem = updatedTowerState[towerStateName][0];\n        return tobeShiftItem;\n      };\n\n      const updatedTowerState = { ...towerState\n      };\n      const shiftItem = selectItemToMove(fromTower);\n\n      const doneMoveDownCallback = () => {\n        moveItem(toTower, shiftItem);\n        setIsDoneMoving(true);\n      };\n\n      const doneMoveHorizontalCallback = () => {\n        setIsDoneMoving(false);\n        requestId = window.requestAnimationFrame(timeStamp => {\n          movePlateDown({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef,\n            requestId,\n            doneMoveDownCallback\n          });\n        });\n      };\n\n      const unShiftTowerName = `${TOWER_TYPES[toTower]}List`;\n      const unshiftTower = [...updatedTowerState[unShiftTowerName]];\n      const isValidShift = (unshiftTower === null || unshiftTower === void 0 ? void 0 : unshiftTower.length) === 0 || ((_unshiftTower$ = unshiftTower[0]) === null || _unshiftTower$ === void 0 ? void 0 : _unshiftTower$.size) >= (shiftItem === null || shiftItem === void 0 ? void 0 : shiftItem.size);\n\n      if (isValidShift) {\n        setIsDoneMoving(false);\n        requestId = window.requestAnimationFrame(timeStamp => {\n          movePlateHorizontal({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef,\n            requestId,\n            doneMoveHorizontalCallback\n          });\n        });\n      } else {\n        setShowBeSa(true);\n        setIsDoneMoving(true);\n        requestId = window.requestAnimationFrame(timeStamp => {\n          movePlateDown({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef: fromTowerRef,\n            requestId,\n            doneMoveDownCallback: () => {\n              setFromTower(null);\n              setToTower(null);\n            }\n          });\n        });\n      }\n    }\n\n    return () => {\n      window.cancelAnimationFrame(requestId);\n    };\n  }, [fromTower, toTower, moveItem, towerState]);\n\n  const checkTypeOfPlateText = typeOfPlate => {\n    switch (typeOfPlate) {\n      default:\n        return \"Hanoi\";\n    }\n  };\n\n  const onTowerClickHandler = towerType => {\n    if (!isDoneMoving) return;\n    if (isWin) return;\n\n    if (!fromTower) {\n      const towerStateName = `${TOWER_TYPES[towerType]}List`;\n      if (towerState[towerStateName].length === 0) return;\n      setFromTower(towerType);\n    } else {\n      setToTower(towerType);\n    }\n  };\n\n  const {\n    sourceList,\n    auxiliaryList,\n    destinationList\n  } = towerState;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"App\"],\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: `The tower of  ${checkTypeOfPlateText(typeOfPlate)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"So fun!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"play-box\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"wrong-move__wrapper\"],\n        style: {\n          opacity: isShowBeSa ? \"1\" : \"0\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"N\\u1ED2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: warningRick,\n          title: \"wrong move!\",\n          alt: \"wrong move!\",\n          className: styles[\"be-sa\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"towers-wrapper\"],\n        children: [/*#__PURE__*/_jsxDEV(Tower, {\n          name: TOWER_TYPES.source,\n          plateList: sourceList,\n          onTowerClick: onTowerClickHandler,\n          ref: sourceRef,\n          isWin: isWin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tower, {\n          name: TOWER_TYPES.auxiliary,\n          plateList: auxiliaryList,\n          onTowerClick: onTowerClickHandler,\n          ref: auxiliaryRef,\n          isWin: isWin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tower, {\n          name: TOWER_TYPES.destination,\n          plateList: destinationList,\n          onTowerClick: onTowerClickHandler,\n          ref: destinationRef,\n          isWin: isWin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), isWin && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles[\"button--restart\"],\n        onClick: reset,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tqnDU6XdrAkmeOuguEiMAEHODbs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/apple/the-tower/src/App.js"],"names":["useState","useEffect","useRef","useCallback","_isEqual","movePlateDown","movePlateUp","movePlateHorizontal","Tower","warningRick","styles","plateList","name","size","color","TOWER_TYPES","source","auxiliary","destination","App","typeOfPlate","setTypeOfPlate","isWin","setIsWin","isDoneMoving","setIsDoneMoving","isShowBeSa","setShowBeSa","towerState","setTowerState","sourceList","auxiliaryList","destinationList","fromTower","setFromTower","toTower","setToTower","sourceRef","auxiliaryRef","destinationRef","reset","moveItem","towerType","shiftItem","unShiftTowerName","shiftTowerName","prevState","updatedTowerState","shiftTower","shift","unshiftTower","unshift","setTimeout","requestId","start","previousTimeStamp","fromTowerRef","toTowerRef","current","doneMoveUpCallback","window","requestAnimationFrame","timeStamp","currentTimeStamp","checkIsValidShift","towerStateName","length","selectItemToMove","isValidToPop","tobeShiftItem","doneMoveDownCallback","doneMoveHorizontalCallback","isValidShift","cancelAnimationFrame","checkTypeOfPlateText","onTowerClickHandler","opacity"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport _isEqual from \"lodash/isEqual\";\nimport { movePlateDown, movePlateUp, movePlateHorizontal } from \"./utils\";\n\nimport Tower from \"./Tower\";\nimport warningRick from \"./images/warning-rick.png\";\n\nimport styles from \"./styles.module.scss\";\n\nconst plateList = [\n  { name: \"plate 1\", size: \"40\", color: \"red\" },\n  { name: \"plate 2\", size: \"50\", color: \"green\" },\n  { name: \"plate 3\", size: \"60\", color: \"blue\" },\n  { name: \"plate 4\", size: \"70\", color: \"yellow\" }\n];\n\nexport const TOWER_TYPES = {\n  source: \"source\",\n  auxiliary: \"auxiliary\",\n  destination: \"destination\"\n};\n\nexport default function App() {\n  const [typeOfPlate, setTypeOfPlate] = useState(\"\");\n  const [isWin, setIsWin] = useState(false);\n  const [isDoneMoving, setIsDoneMoving] = useState(true);\n  const [isShowBeSa, setShowBeSa] = useState(false);\n\n  const [towerState, setTowerState] = useState({\n    sourceList: [...plateList],\n    auxiliaryList: [],\n    destinationList: []\n  });\n  const [fromTower, setFromTower] = useState(null);\n  const [toTower, setToTower] = useState(null);\n\n  const sourceRef = useRef(null);\n  const auxiliaryRef = useRef(null);\n  const destinationRef = useRef(null);\n\n  const reset = () => {\n    setIsWin(false);\n    setIsDoneMoving(true);\n    setShowBeSa(false);\n    setTowerState({\n      sourceList: [...plateList],\n      auxiliaryList: [],\n      destinationList: []\n    });\n    setFromTower(null);\n    setToTower(null);\n  };\n\n  const moveItem = useCallback(\n    (towerType, shiftItem) => {\n      if (!fromTower || !toTower) return;\n      const unShiftTowerName = `${TOWER_TYPES[towerType]}List`;\n      const shiftTowerName = `${TOWER_TYPES[fromTower]}List`;\n\n      setTowerState((prevState) => {\n        let updatedTowerState = { ...prevState };\n\n        const shiftTower = [...updatedTowerState[shiftTowerName]];\n        shiftTower.shift();\n\n        updatedTowerState = {\n          ...updatedTowerState,\n          [shiftTowerName]: [...shiftTower]\n        };\n\n        const unshiftTower = [...updatedTowerState[unShiftTowerName]];\n\n        unshiftTower.unshift(shiftItem);\n\n        updatedTowerState = {\n          ...updatedTowerState,\n          [unShiftTowerName]: [...unshiftTower]\n        };\n\n        setFromTower(null);\n        setToTower(null);\n        return {\n          ...updatedTowerState\n        };\n      });\n    },\n    [fromTower, toTower]\n  );\n\n  useEffect(() => {\n    // move()\n  }, []);\n\n  useEffect(() => {\n    if (isShowBeSa) {\n      setTimeout(() => {\n        setShowBeSa(false);\n      }, 800);\n    }\n  }, [isShowBeSa]);\n\n  useEffect(() => {\n    let isWin = false;\n    const { destinationList } = towerState;\n    if (_isEqual(destinationList, plateList)) {\n      isWin = true;\n    }\n\n    setIsWin(isWin);\n  }, [towerState]);\n\n  useEffect(() => {\n    if (!fromTower) return;\n\n    let requestId;\n\n    let start;\n    let previousTimeStamp;\n    let fromTowerRef = null;\n    let toTowerRef = null;\n\n    if (fromTower && !toTower) {\n      switch (fromTower) {\n        case TOWER_TYPES.source:\n          fromTowerRef = sourceRef.current;\n          break;\n        case TOWER_TYPES.auxiliary:\n          fromTowerRef = auxiliaryRef.current;\n          break;\n        case TOWER_TYPES.destination:\n          fromTowerRef = destinationRef.current;\n          break;\n        default:\n      }\n\n      const doneMoveUpCallback = () => {\n        setIsDoneMoving(true);\n      };\n\n      setIsDoneMoving(false);\n      requestId = window.requestAnimationFrame((timeStamp) => {\n        movePlateUp({\n          currentTimeStamp: timeStamp,\n          start,\n          previousTimeStamp,\n          fromTowerRef,\n          requestId,\n          doneMoveUpCallback\n        });\n      });\n    }\n\n    if (toTower) {\n      switch (toTower) {\n        case TOWER_TYPES.source:\n          toTowerRef = sourceRef.current;\n          break;\n        case TOWER_TYPES.auxiliary:\n          toTowerRef = auxiliaryRef.current;\n          break;\n        case TOWER_TYPES.destination:\n          toTowerRef = destinationRef.current;\n          break;\n        default:\n      }\n\n      switch (fromTower) {\n        case TOWER_TYPES.source:\n          fromTowerRef = sourceRef.current;\n          break;\n        case TOWER_TYPES.auxiliary:\n          fromTowerRef = auxiliaryRef.current;\n          break;\n        case TOWER_TYPES.destination:\n          fromTowerRef = destinationRef.current;\n          break;\n        default:\n      }\n\n      const checkIsValidShift = (towerType) => {\n        const towerStateName = `${TOWER_TYPES[towerType]}List`;\n        if (updatedTowerState[towerStateName].length > 0) return true;\n\n        return false;\n      };\n\n      const selectItemToMove = (towerType) => {\n        const isValidToPop = checkIsValidShift(towerType);\n        if (!isValidToPop) return;\n\n        const towerStateName = `${TOWER_TYPES[towerType]}List`;\n\n        const tobeShiftItem = updatedTowerState[towerStateName][0];\n        return tobeShiftItem;\n      };\n\n      const updatedTowerState = { ...towerState };\n      const shiftItem = selectItemToMove(fromTower);\n\n      const doneMoveDownCallback = () => {\n        moveItem(toTower, shiftItem);\n        setIsDoneMoving(true);\n      };\n\n      const doneMoveHorizontalCallback = () => {\n        setIsDoneMoving(false);\n        requestId = window.requestAnimationFrame((timeStamp) => {\n          movePlateDown({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef,\n            requestId,\n            doneMoveDownCallback\n          });\n        });\n      };\n\n      const unShiftTowerName = `${TOWER_TYPES[toTower]}List`;\n\n      const unshiftTower = [...updatedTowerState[unShiftTowerName]];\n\n      const isValidShift =\n        unshiftTower?.length === 0 || unshiftTower[0]?.size >= shiftItem?.size;\n\n      if (isValidShift) {\n        setIsDoneMoving(false);\n        requestId = window.requestAnimationFrame((timeStamp) => {\n          movePlateHorizontal({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef,\n            requestId,\n            doneMoveHorizontalCallback\n          });\n        });\n      } else {\n        setShowBeSa(true);\n        setIsDoneMoving(true);\n\n        requestId = window.requestAnimationFrame((timeStamp) => {\n          movePlateDown({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef: fromTowerRef,\n            requestId,\n            doneMoveDownCallback: () => {\n              setFromTower(null);\n              setToTower(null);\n            }\n          });\n        });\n      }\n    }\n\n    return () => {\n      window.cancelAnimationFrame(requestId);\n    };\n  }, [fromTower, toTower, moveItem, towerState]);\n\n  const checkTypeOfPlateText = (typeOfPlate) => {\n    switch (typeOfPlate) {\n      default:\n        return \"Hanoi\";\n    }\n  };\n\n  const onTowerClickHandler = (towerType) => {\n    if (!isDoneMoving) return;\n\n    if (isWin) return;\n\n    if (!fromTower) {\n      const towerStateName = `${TOWER_TYPES[towerType]}List`;\n      if (towerState[towerStateName].length === 0) return;\n\n      setFromTower(towerType);\n    } else {\n      setToTower(towerType);\n    }\n  };\n\n  const { sourceList, auxiliaryList, destinationList } = towerState;\n\n  return (\n    <div className={styles[\"App\"]}>\n      <h1>{`The tower of  ${checkTypeOfPlateText(typeOfPlate)}`}</h1>\n      <h2>So fun!</h2>\n      <div className={styles[\"play-box\"]}>\n        <div\n          className={styles[\"wrong-move__wrapper\"]}\n          style={{ opacity: isShowBeSa ? \"1\" : \"0\" }}\n        >\n          <strong>NỒ</strong>\n          <img\n            src={warningRick}\n            title={\"wrong move!\"}\n            alt={\"wrong move!\"}\n            className={styles[\"be-sa\"]}\n          />\n        </div>\n        <div className={styles[\"towers-wrapper\"]}>\n          <Tower\n            name={TOWER_TYPES.source}\n            plateList={sourceList}\n            onTowerClick={onTowerClickHandler}\n            ref={sourceRef}\n            isWin={isWin}\n          />\n          <Tower\n            name={TOWER_TYPES.auxiliary}\n            plateList={auxiliaryList}\n            onTowerClick={onTowerClickHandler}\n            ref={auxiliaryRef}\n            isWin={isWin}\n          />\n          <Tower\n            name={TOWER_TYPES.destination}\n            plateList={destinationList}\n            onTowerClick={onTowerClickHandler}\n            ref={destinationRef}\n            isWin={isWin}\n          />\n        </div>\n        {isWin && (\n          <button className={styles[\"button--restart\"]} onClick={reset}>\n            Restart\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}