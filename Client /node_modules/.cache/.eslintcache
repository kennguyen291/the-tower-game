[{"/Users/apple/the-tower/src/index.js":"1","/Users/apple/the-tower/src/App.js":"2","/Users/apple/the-tower/src/utils.js":"3","/Users/apple/the-tower/src/Tower/index.js":"4","/Users/apple/the-tower/src/Plate/index.js":"5","/Users/apple/the-tower/src/FireWork/index.js":"6"},{"size":228,"mtime":1642483027627,"results":"7","hashOfConfig":"8"},{"size":8921,"mtime":1642486565005,"results":"9","hashOfConfig":"8"},{"size":5114,"mtime":1642483094152,"results":"10","hashOfConfig":"8"},{"size":1099,"mtime":1642484767480,"results":"11","hashOfConfig":"8"},{"size":333,"mtime":1642483247105,"results":"12","hashOfConfig":"8"},{"size":210,"mtime":1642483145939,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18mapic",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/apple/the-tower/src/index.js",[],"/Users/apple/the-tower/src/App.js",["28","29","30"],"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport _isEqual from \"lodash/isEqual\";\nimport { movePlateDown, movePlateUp, movePlateHorizontal } from \"./utils\";\n\nimport Tower from \"./Tower\";\nimport warningRick from \"./images/warning-rick.png\";\n\nimport styles from \"./styles.module.scss\";\n\nconst plateList = [\n  { name: \"plate 1\", size: \"40\", color: \"red\" },\n  { name: \"plate 2\", size: \"50\", color: \"green\" },\n  { name: \"plate 3\", size: \"60\", color: \"blue\" },\n  { name: \"plate 4\", size: \"70\", color: \"yellow\" }\n];\n\nexport const TOWER_TYPES = {\n  source: \"source\",\n  auxiliary: \"auxiliary\",\n  destination: \"destination\"\n};\n\nexport default function App() {\n  const [typeOfPlate, setTypeOfPlate] = useState(\"\");\n  const [isWin, setIsWin] = useState(false);\n  const [isDoneMoving, setIsDoneMoving] = useState(true);\n  const [isShowWarning, setShowWarning] = useState(false);\n\n  const [towerState, setTowerState] = useState({\n    sourceList: [...plateList],\n    auxiliaryList: [],\n    destinationList: []\n  });\n  const [fromTower, setFromTower] = useState(null);\n  const [toTower, setToTower] = useState(null);\n\n  const sourceRef = useRef(null);\n  const auxiliaryRef = useRef(null);\n  const destinationRef = useRef(null);\n\n  const reset = () => {\n    setIsWin(false);\n    setIsDoneMoving(true);\n    setShowWarning(false);\n    setTowerState({\n      sourceList: [...plateList],\n      auxiliaryList: [],\n      destinationList: []\n    });\n    setFromTower(null);\n    setToTower(null);\n  };\n\n  const moveItem = useCallback(\n    (towerType, shiftItem) => {\n      if (!fromTower || !toTower) return;\n      const unShiftTowerName = `${TOWER_TYPES[towerType]}List`;\n      const shiftTowerName = `${TOWER_TYPES[fromTower]}List`;\n\n      setTowerState((prevState) => {\n        let updatedTowerState = { ...prevState };\n\n        const shiftTower = [...updatedTowerState[shiftTowerName]];\n        shiftTower.shift();\n\n        updatedTowerState = {\n          ...updatedTowerState,\n          [shiftTowerName]: [...shiftTower]\n        };\n\n        const unshiftTower = [...updatedTowerState[unShiftTowerName]];\n\n        unshiftTower.unshift(shiftItem);\n\n        updatedTowerState = {\n          ...updatedTowerState,\n          [unShiftTowerName]: [...unshiftTower]\n        };\n\n        setFromTower(null);\n        setToTower(null);\n        return {\n          ...updatedTowerState\n        };\n      });\n    },\n    [fromTower, toTower]\n  );\n\n  useEffect(() => {\n    // move()\n  }, []);\n\n  useEffect(() => {\n    if (isShowWarning) {\n      setTimeout(() => {\n        setShowWarning(false);\n      }, 800);\n    }\n  }, [isShowWarning]);\n\n  useEffect(() => {\n    let isWin = false;\n    const { destinationList } = towerState;\n    if (_isEqual(destinationList, plateList)) {\n      isWin = true;\n    }\n\n    setIsWin(isWin);\n  }, [towerState]);\n\n  useEffect(() => {\n    if (!fromTower) return;\n\n    let requestId;\n\n    let start;\n    let previousTimeStamp;\n    let fromTowerRef = null;\n    let toTowerRef = null;\n\n    if (fromTower && !toTower) {\n      switch (fromTower) {\n        case TOWER_TYPES.source:\n          fromTowerRef = sourceRef.current;\n          break;\n        case TOWER_TYPES.auxiliary:\n          fromTowerRef = auxiliaryRef.current;\n          break;\n        case TOWER_TYPES.destination:\n          fromTowerRef = destinationRef.current;\n          break;\n        default:\n      }\n\n      const doneMoveUpCallback = () => {\n        setIsDoneMoving(true);\n      };\n\n      setIsDoneMoving(false);\n      requestId = window.requestAnimationFrame((timeStamp) => {\n        movePlateUp({\n          currentTimeStamp: timeStamp,\n          start,\n          previousTimeStamp,\n          fromTowerRef,\n          requestId,\n          doneMoveUpCallback\n        });\n      });\n    }\n\n    if (toTower) {\n      switch (toTower) {\n        case TOWER_TYPES.source:\n          toTowerRef = sourceRef.current;\n          break;\n        case TOWER_TYPES.auxiliary:\n          toTowerRef = auxiliaryRef.current;\n          break;\n        case TOWER_TYPES.destination:\n          toTowerRef = destinationRef.current;\n          break;\n        default:\n      }\n\n      switch (fromTower) {\n        case TOWER_TYPES.source:\n          fromTowerRef = sourceRef.current;\n          break;\n        case TOWER_TYPES.auxiliary:\n          fromTowerRef = auxiliaryRef.current;\n          break;\n        case TOWER_TYPES.destination:\n          fromTowerRef = destinationRef.current;\n          break;\n        default:\n      }\n\n      const checkIsValidShift = (towerType) => {\n        const towerStateName = `${TOWER_TYPES[towerType]}List`;\n        if (updatedTowerState[towerStateName].length > 0) return true;\n\n        return false;\n      };\n\n      const selectItemToMove = (towerType) => {\n        const isValidToPop = checkIsValidShift(towerType);\n        if (!isValidToPop) return;\n\n        const towerStateName = `${TOWER_TYPES[towerType]}List`;\n\n        const tobeShiftItem = updatedTowerState[towerStateName][0];\n        return tobeShiftItem;\n      };\n\n      const updatedTowerState = { ...towerState };\n      const shiftItem = selectItemToMove(fromTower);\n\n      const doneMoveDownCallback = () => {\n        moveItem(toTower, shiftItem);\n        setIsDoneMoving(true);\n      };\n\n      const doneMoveHorizontalCallback = () => {\n        setIsDoneMoving(false);\n        requestId = window.requestAnimationFrame((timeStamp) => {\n          movePlateDown({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef,\n            requestId,\n            doneMoveDownCallback\n          });\n        });\n      };\n\n      const unShiftTowerName = `${TOWER_TYPES[toTower]}List`;\n\n      const unshiftTower = [...updatedTowerState[unShiftTowerName]];\n\n      const isValidShift =\n        unshiftTower?.length === 0 || unshiftTower[0]?.size >= shiftItem?.size;\n\n      if (isValidShift) {\n        setIsDoneMoving(false);\n        requestId = window.requestAnimationFrame((timeStamp) => {\n          movePlateHorizontal({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef,\n            requestId,\n            doneMoveHorizontalCallback\n          });\n        });\n      } else {\n        setShowWarning(true);\n        setIsDoneMoving(true);\n\n        requestId = window.requestAnimationFrame((timeStamp) => {\n          movePlateDown({\n            currentTimeStamp: timeStamp,\n            start,\n            previousTimeStamp,\n            fromTowerRef,\n            toTowerRef: fromTowerRef,\n            requestId,\n            doneMoveDownCallback: () => {\n              setFromTower(null);\n              setToTower(null);\n            }\n          });\n        });\n      }\n    }\n\n    return () => {\n      window.cancelAnimationFrame(requestId);\n    };\n  }, [fromTower, toTower, moveItem, towerState]);\n\n  const checkTypeOfPlateText = (typeOfPlate) => {\n    switch (typeOfPlate) {\n      default:\n        return \"Hanoi\";\n    }\n  };\n\n  const onTowerClickHandler = (towerType) => {\n    if (!isDoneMoving) return;\n\n    if (isWin) return;\n\n    if (!fromTower) {\n      const towerStateName = `${TOWER_TYPES[towerType]}List`;\n      if (towerState[towerStateName].length === 0) return;\n\n      setFromTower(towerType);\n    } else {\n      setToTower(towerType);\n    }\n  };\n\n  const { sourceList, auxiliaryList, destinationList } = towerState;\n\n  return (\n    <div className={styles[\"App\"]}>\n      <h1>THE TOWER</h1>\n      <h2>Move all 4 PLATES from TOWER 1 to TOWER 3 to WIN THE GAME.</h2>\n      <h3>Notes: smaller plate CAN NOT go underneath a bigger plate.</h3>\n      <div className={styles[\"play-box\"]}>\n        <div\n          className={styles[\"wrong-move__wrapper\"]}\n          style={{ opacity: isShowWarning ? \"1\" : \"0\" }}\n        >\n          <strong>NO</strong>\n          <img\n            src={warningRick}\n            title={\"wrong move!\"}\n            alt={\"wrong move!\"}\n            className={styles[\"warning-rick\"]}\n          />\n        </div>\n        <div className={styles[\"towers-wrapper\"]}>\n          <Tower\n            name={TOWER_TYPES.source}\n            plateList={sourceList}\n            onTowerClick={onTowerClickHandler}\n            ref={sourceRef}\n            isWin={isWin}\n          />\n          <Tower\n            name={TOWER_TYPES.auxiliary}\n            plateList={auxiliaryList}\n            onTowerClick={onTowerClickHandler}\n            ref={auxiliaryRef}\n            isWin={isWin}\n          />\n          <Tower\n            name={TOWER_TYPES.destination}\n            plateList={destinationList}\n            onTowerClick={onTowerClickHandler}\n            ref={destinationRef}\n            isWin={isWin}\n          />\n        </div>\n        {isWin && (\n          <button className={styles[\"button--restart\"]} onClick={reset}>\n            Restart\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/apple/the-tower/src/utils.js",[],"/Users/apple/the-tower/src/Tower/index.js",[],["31","32"],"/Users/apple/the-tower/src/Plate/index.js",[],"/Users/apple/the-tower/src/FireWork/index.js",[],{"ruleId":"33","severity":1,"message":"34","line":24,"column":10,"nodeType":"35","messageId":"36","endLine":24,"endColumn":21},{"ruleId":"33","severity":1,"message":"37","line":24,"column":23,"nodeType":"35","messageId":"36","endLine":24,"endColumn":37},{"ruleId":"33","severity":1,"message":"38","line":266,"column":9,"nodeType":"35","messageId":"36","endLine":266,"endColumn":29},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"no-unused-vars","'typeOfPlate' is assigned a value but never used.","Identifier","unusedVar","'setTypeOfPlate' is assigned a value but never used.","'checkTypeOfPlateText' is assigned a value but never used.","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]